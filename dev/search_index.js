var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = Lynx","category":"page"},{"location":"#Lynx","page":"Home","title":"Lynx","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for Lynx.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [Lynx]","category":"page"},{"location":"#Lynx.AbstractLayout","page":"Home","title":"Lynx.AbstractLayout","text":"Layouts are used to organize the canvas and other widgets within the window.\n\nThey are simple function or callable structures.\n\nExample of layout implementation:\n\nstruct MyLayout <: AbstractLayout\n    fields...\n    function MyLayout(args...)\n        ...\n    end\nend\n\nfunction (layout::MyLayout)(window, canvas, widgets...)\n    ...\nend\n\nThe call implementation of a layout should return a widget  that contains (or not) the canvas and the widgets. The returned widget will then be added to the window.\n\n\n\n\n\n","category":"type"},{"location":"#Lynx.App","page":"Home","title":"Lynx.App","text":"An App is a basic structure that holds a window, a canvas and other widgets to make a interactive application with a few lines of code.\n\n\n\n\n\n","category":"type"},{"location":"#Lynx.SideBar","page":"Home","title":"Lynx.SideBar","text":"The SideBar layout divides the window between the canvas and a sidebar containing the other widgets.\n\n\n\n\n\n","category":"type"},{"location":"#Lynx.SideBar-2","page":"Home","title":"Lynx.SideBar","text":"    SideBar(position = :left, size = .25, props = NamedTuple()) -> SideBar\n\nCreates a SideBar layout. The position determines where the sidebar is placed relative  to the canvas (can be either :left or :right). The size controls the width of the  sidebar relative to the width of the window (must be a value between 0 and 1). You can  also pass aditional properties for the sidebar widget using the props parameter.\n\n\n\n\n\n","category":"type"},{"location":"#Lynx.Box-Tuple{Symbol}","page":"Home","title":"Lynx.Box","text":"    Box(layout; props...) -> Widget{GtkBox}\n\nA container for packing widgets in a single row or column\n\n\n\n\n\n","category":"method"},{"location":"#Lynx.Button-Tuple{String}","page":"Home","title":"Lynx.Button","text":"    Button(text; props...) -> Widget{GtkButton}\n\nA widget that emits a signal when clicked on.\n\n\n\n\n\n","category":"method"},{"location":"#Lynx.CanvasOnly-Tuple{Widget, Canvas, Any}","page":"Home","title":"Lynx.CanvasOnly","text":"The canvas is the only widget and fills the entire window.\n\n\n\n\n\n","category":"method"},{"location":"#Lynx.CheckBox-Tuple{}","page":"Home","title":"Lynx.CheckBox","text":"    CheckBox(; props...) -> Widget{GtkCheckButton}\n\nA widget with with a check box.\n\n\n\n\n\n","category":"method"},{"location":"#Lynx.ColorButton-Tuple{ColorTypes.Colorant}","page":"Home","title":"Lynx.ColorButton","text":"    ColorButton(color; props...) -> Widget{GtkColorButton}\n\nA button to launch a color selection dialog\n\n\n\n\n\n","category":"method"},{"location":"#Lynx.ComboBox-Tuple","page":"Home","title":"Lynx.ComboBox","text":"    ComboBox(args...; props...) -> Widget{GtkComboBox}\n\nA widget used to choose from a list of items\n\n\n\n\n\n","category":"method"},{"location":"#Lynx.ComboBoxText-Tuple","page":"Home","title":"Lynx.ComboBoxText","text":"ComboBoxText(args...; props...) -> Widget{GtkComboBoxText}\n\nA simple, text-only combo box\n\n\n\n\n\n","category":"method"},{"location":"#Lynx.FileChooserDialog-Tuple","page":"Home","title":"Lynx.FileChooserDialog","text":"    FileChooserDialog(args...; props...) -> Widget{GtkFileChooserDialog}\n\nA file chooser dialog, suitable for “File/Open” or “File/Save” commands\n\n\n\n\n\n","category":"method"},{"location":"#Lynx.Frame-Tuple","page":"Home","title":"Lynx.Frame","text":"    Frame(args...; props...) -> Widget{GtkFrame}\n\nA bin with a decorative frame and optional label\n\n\n\n\n\n","category":"method"},{"location":"#Lynx.GLArea-Tuple","page":"Home","title":"Lynx.GLArea","text":"    GLArea(args...; props...) -> Widget{GtkGLArea}\n\nA widget for custom drawing with OpenGL\n\n\n\n\n\n","category":"method"},{"location":"#Lynx.Image-Tuple{}","page":"Home","title":"Lynx.Image","text":"    Image([filepath]; props...) --> Widget{GtkImage}\n\nA widget displaying an image\n\n\n\n\n\n","category":"method"},{"location":"#Lynx.Label-Tuple{String}","page":"Home","title":"Lynx.Label","text":"    Label(text; props...) -> Widget{GtkLabel}\n\nA widget that displays a small to medium amount of text\n\n\n\n\n\n","category":"method"},{"location":"#Lynx.LinkButton-Tuple","page":"Home","title":"Lynx.LinkButton","text":"    LinkButton(text; props...) -> Widget{GtkLinkButton}\n\nCreate buttons bound to a URL\n\n\n\n\n\n","category":"method"},{"location":"#Lynx.MessageDialog-Tuple","page":"Home","title":"Lynx.MessageDialog","text":"    MessageDialog(args...; props...) -> Widget{GtkMessageDialog}\n\nA convenient message window\n\n\n\n\n\n","category":"method"},{"location":"#Lynx.Notebook-Tuple","page":"Home","title":"Lynx.Notebook","text":"    Notebook(args...; props...) -> Widget{GtkNotebook}\n\nA tabbed notebook container\n\n\n\n\n\n","category":"method"},{"location":"#Lynx.Paned-Tuple{Symbol}","page":"Home","title":"Lynx.Paned","text":"    Paned(layout; props...) -> Widget{GtkPaned}\n\nA widget with two adjustable panes\n\n\n\n\n\n","category":"method"},{"location":"#Lynx.ProgressBar-Tuple{}","page":"Home","title":"Lynx.ProgressBar","text":"    ProgressBar(; props...) -> Widget{GtkProgressBar}\n\nA widget which indicates progress visually\n\n\n\n\n\n","category":"method"},{"location":"#Lynx.Scrolled-Tuple","page":"Home","title":"Lynx.Scrolled","text":"    Scrolled(args...; props...) -> Widget{GtkScrolledWindow}\n\nAdds scrollbars to its child widget\n\n\n\n\n\n","category":"method"},{"location":"#Lynx.Slider","page":"Home","title":"Lynx.Slider","text":"    Slider(range, vertical = false; props...) -> Widget{GtkScale}\n\nA slider widget for selecting a value from a range\n\n\n\n\n\n","category":"function"},{"location":"#Lynx.SpinButton-Tuple{AbstractRange, Vararg{Any, N} where N}","page":"Home","title":"Lynx.SpinButton","text":"    SpinButton(range; props...) -> Widget{GtkSpinButton}\n\nRetrieve an integer or floating-point number from the user\n\n\n\n\n\n","category":"method"},{"location":"#Lynx.Spinner-Tuple{}","page":"Home","title":"Lynx.Spinner","text":"    Spinner(; props...) -> Widget{GtkSpinner}\n\nShow a spinner animation\n\n\n\n\n\n","category":"method"},{"location":"#Lynx.Switch-Tuple{}","page":"Home","title":"Lynx.Switch","text":"    Switch(; props...) -> Widget{GtkSwitch}\n\nA “light switch” style toggle\n\n\n\n\n\n","category":"method"},{"location":"#Lynx.TextField-Tuple","page":"Home","title":"Lynx.TextField","text":"    TextField(; props...) -> Widget{GtkEntry}\n\nA single line text entry field\n\n\n\n\n\n","category":"method"},{"location":"#Lynx.ToggleBtn-Tuple","page":"Home","title":"Lynx.ToggleBtn","text":"    ToggleBtn(; props...) -> Widget{GtkToggleButton}\n\nCreate buttons which retain their state\n\n\n\n\n\n","category":"method"},{"location":"#Lynx.VolumeBtn-Tuple","page":"Home","title":"Lynx.VolumeBtn","text":"    VolumeBtn(; props...) -> Widget{GtkVolumeButton}\n\nA button which pops up a volume control\n\n\n\n\n\n","category":"method"},{"location":"#Lynx.Window-Tuple{String, Int64, Int64}","page":"Home","title":"Lynx.Window","text":"    Window(title, width, height; props...) -> Widget{GtkWindow}\n\nToplevel which can contain other widgets\n\n\n\n\n\n","category":"method"},{"location":"#Lynx.framerate!-Tuple{Real}","page":"Home","title":"Lynx.framerate!","text":"framerate!(x::Real)\n\nSets the current framerate.\n\n\n\n\n\n","category":"method"},{"location":"#Lynx.gcpreserve-Tuple{Gtk.GtkWidget, Any}","page":"Home","title":"Lynx.gcpreserve","text":"gcpreserve(widget::GtkWidget, obj)\n\nPreserve obj until widget has been destroyed.\n\n\n\n\n\n","category":"method"},{"location":"#Lynx.getprop-Tuple{Lynx.AbstractWidget, Union{AbstractString, Symbol}, DataType}","page":"Home","title":"Lynx.getprop","text":"    getprop(widget, name, T) -> T\n\nGets a widget property indentified by name with type T.\n\n\n\n\n\n","category":"method"},{"location":"#Lynx.layout!-Tuple{Function}","page":"Home","title":"Lynx.layout!","text":"layout!(layout::Function)\n\nSets the current layout.\n\n\n\n\n\n","category":"method"},{"location":"#Lynx.loop!-Tuple{Bool}","page":"Home","title":"Lynx.loop!","text":"loop!(x::Bool)\n\nWhether or not the update function should be called every frame.\n\n\n\n\n\n","category":"method"},{"location":"#Lynx.mapr-NTuple{5, Real}","page":"Home","title":"Lynx.mapr","text":"    mapr(t, a, b, c, d) -> Real\n\nMaps the value t from the interval [a, b] to [c, d]\n\n\n\n\n\n","category":"method"},{"location":"#Lynx.mapr-Tuple{Real, Real, Real}","page":"Home","title":"Lynx.mapr","text":"    mapr(t, a, b) -> Real\n\nMaps the value t from the interval [0, 1] to [a, b]\n\n\n\n\n\n","category":"method"},{"location":"#Lynx.onmousedown-Tuple{Function, Canvas}","page":"Home","title":"Lynx.onmousedown","text":"    onmousedown(callback, canvas)\n\nThe mouse-down event is fired when the user press with the mouse on the canvas.\n\n\n\n\n\n","category":"method"},{"location":"#Lynx.onmousedrag-Tuple{Function, Canvas}","page":"Home","title":"Lynx.onmousedrag","text":"    onmousedrag(callback, canvas)\n\nThe mouse-drag event is fired when the user holds down and move the cursor on the canvas.\n\n\n\n\n\n","category":"method"},{"location":"#Lynx.onmousemove-Tuple{Function, Canvas}","page":"Home","title":"Lynx.onmousemove","text":"    onmousemove(callback, canvas)\n\nThe mouse-move event is fired when the user moves the cursor on the canvas.\n\n\n\n\n\n","category":"method"},{"location":"#Lynx.onmouseup-Tuple{Function, Canvas}","page":"Home","title":"Lynx.onmouseup","text":"    onmouseup(callback, canvas)\n\nThe mouse-up event is fired when the user release the mouse on the canvas.\n\n\n\n\n\n","category":"method"},{"location":"#Lynx.onscroll-Tuple{Function, Canvas}","page":"Home","title":"Lynx.onscroll","text":"    onscroll(callback, canvas)\n\nThe scroll event is fired when the user scrolls with the mouse-wheel on the canvas.\n\n\n\n\n\n","category":"method"},{"location":"#Lynx.run!-Tuple{Function}","page":"Home","title":"Lynx.run!","text":"    run!(update::Function; await = false, hotreload = false)\n\nRun the current App with the given update function.  If await is true, the main task will be blocked until  the user closes the window. If hotreload is true, only  the newest version of update will be called.\n\n\n\n\n\n","category":"method"},{"location":"#Lynx.setprop!-Tuple{Lynx.AbstractWidget, Union{AbstractString, Symbol}, Any}","page":"Home","title":"Lynx.setprop!","text":"    setprop!(widget, name, value)\n\nSets the value of a widget property indentified by name.\n\n\n\n\n\n","category":"method"},{"location":"#Lynx.use!-Tuple{Lynx.AbstractWidget}","page":"Home","title":"Lynx.use!","text":"    use!(widget) -> AbstractWidget\n\nAdds the widget to the current application and returns it.\n\n\n\n\n\n","category":"method"},{"location":"#Lynx.@app-Tuple","page":"Home","title":"Lynx.@app","text":"@app() -> App\n\nReturns the current App or throws an exception if no App has been created.\n\n\n\n\n\n","category":"macro"},{"location":"#Lynx.@canvas-Tuple","page":"Home","title":"Lynx.@canvas","text":"@canvas() -> Canvas\n\nReturns the current Canvas.\n\n\n\n\n\n","category":"macro"},{"location":"#Lynx.@framerate-Tuple","page":"Home","title":"Lynx.@framerate","text":"@framerate() -> Float64\n\nReturns the current framerate.\n\n\n\n\n\n","category":"macro"},{"location":"#Lynx.@on-Tuple{Any}","page":"Home","title":"Lynx.@on","text":"    @on widget.event() do args... body... end\n\nAdds a event callback to the corresponding widget\n\nUsage\n\n@on window.destroy() do args...\n    # do something when the window is destroyed\nend\n\n@on button.clicked() do args...\n    # do something when the button is clicked\nend\n\n\n\n\n\n\n","category":"macro"},{"location":"#Lynx.@use-Tuple{LineNumberNode, Module, Any}","page":"Home","title":"Lynx.@use","text":"    @use widget\n\nAdds the widget to the current application and returns it.\n\n\n\n\n\n","category":"macro"},{"location":"#Lynx.@waitfor-Tuple{Any}","page":"Home","title":"Lynx.@waitfor","text":"    @waitfor widget.event\n\nBlock the current task until the event is triggered for widget.\n\nExamples:\n\nwindow = Window(\"Hello, world\", 800, 600)\n\n... # Some UI stuff\n\nif !isinteractive()\n    # If the code is not running on a interactive julia session\n    # (e.g. the REPL), then the line below will block the current\n    # task until the window is destroyed\n    @waitfor window.destroy\nend\n\n\n\n\n\n","category":"macro"},{"location":"#Lynx.@window-Tuple","page":"Home","title":"Lynx.@window","text":"@window() -> Widget{GtkWindow}\n\nReturns the current Window.\n\n\n\n\n\n","category":"macro"}]
}
