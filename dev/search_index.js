var documenterSearchIndex = {"docs":
[{"location":"reference/api/","page":"Function reference","title":"Function reference","text":"Modules = [Lynx]\nOrder   = [:macro, :function, :type, :constant, ]","category":"page"},{"location":"reference/api/#Lynx.@app-Tuple","page":"Function reference","title":"Lynx.@app","text":"@app() -> LynxApp\n\nReturns the current LynxApp or throws an exception if no LynxApp has been created.\n\n\n\n\n\n","category":"macro"},{"location":"reference/api/#Lynx.@canvas-Tuple","page":"Function reference","title":"Lynx.@canvas","text":"@canvas() -> Canvas\n\nReturns the current Canvas.\n\n\n\n\n\n","category":"macro"},{"location":"reference/api/#Lynx.@framerate-Tuple","page":"Function reference","title":"Lynx.@framerate","text":"@framerate() -> Float64\n\nReturns the current framerate.\n\n\n\n\n\n","category":"macro"},{"location":"reference/api/#Lynx.@height-Tuple{LineNumberNode, Module}","page":"Function reference","title":"Lynx.@height","text":"    @height -> Int\n\nThe height of the current canvas.\n\n\n\n\n\n","category":"macro"},{"location":"reference/api/#Lynx.@on-Tuple{Any}","page":"Function reference","title":"Lynx.@on","text":"    @on widget.event() do args... body... end\n\nAdds a event callback to the corresponding widget\n\nUsage\n\n@on window.destroy() do args...\n    # do something when the window is destroyed\nend\n\n@on button.clicked() do args...\n    # do something when the button is clicked\nend\n\n\n\n\n\n\n","category":"macro"},{"location":"reference/api/#Lynx.@size-Tuple","page":"Function reference","title":"Lynx.@size","text":"    @size -> Tuple{Int, Int}\n\nThe width and height of the current canvas.\n\n\n\n\n\n","category":"macro"},{"location":"reference/api/#Lynx.@use-Tuple{LineNumberNode, Module, Any}","page":"Function reference","title":"Lynx.@use","text":"    @use widget\n\nAdds the widget to the current application and returns it.\n\n\n\n\n\n","category":"macro"},{"location":"reference/api/#Lynx.@waitfor-Tuple{Any}","page":"Function reference","title":"Lynx.@waitfor","text":"    @waitfor widget.event\n\nBlock the current task until the event is triggered for widget.\n\nExamples:\n\nwindow = Window(\"Hello, world\", 800, 600)\n\n... # Some UI stuff\n\nif !isinteractive()\n    # If the code is not running on a interactive julia session\n    # (e.g. the REPL), then the line below will block the current\n    # task until the window is destroyed\n    @waitfor window.destroy\nend\n\n\n\n\n\n","category":"macro"},{"location":"reference/api/#Lynx.@width-Tuple{LineNumberNode, Module}","page":"Function reference","title":"Lynx.@width","text":"    @width -> Int\n\nThe width of the current canvas.\n\n\n\n\n\n","category":"macro"},{"location":"reference/api/#Lynx.@window-Tuple","page":"Function reference","title":"Lynx.@window","text":"@window() -> Window\n\nReturns the current window.\n\n\n\n\n\n","category":"macro"},{"location":"reference/api/#Base.fill!-Tuple{ProgressBar, Real}","page":"Function reference","title":"Base.fill!","text":"    fill!(bar::ProgressBar, fraction::Real) -> Nothing\n\nCauses the progress bar to “fill in” the given fraction of the bar.  The fraction should be between 0.0 and 1.0, inclusive.\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#Lynx.CanvasOnly-Tuple{Widget, Canvas, Vararg{Any, N} where N}","page":"Function reference","title":"Lynx.CanvasOnly","text":"The canvas is the only widget and fills the entire window.\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#Lynx.cspan-Tuple{Int64}","page":"Function reference","title":"Lynx.cspan","text":"    cspan(columns) -> GridElement\n\nCreates a empty GridElement that spans multiple columns\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#Lynx.framerate!-Tuple{Real}","page":"Function reference","title":"Lynx.framerate!","text":"framerate!(x::Real)\n\nSets the current framerate.\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#Lynx.gcpreserve-Tuple{Gtk.GtkWidget, Any}","page":"Function reference","title":"Lynx.gcpreserve","text":"gcpreserve(widget::GtkWidget, obj)\n\nPreserve obj until widget has been destroyed.\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#Lynx.init-Tuple{String, Int64, Int64}","page":"Function reference","title":"Lynx.init","text":"    init(title, width, height; layout = CanvasOnly) -> LynxApp\n\nCreates a new LynxApp.\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#Lynx.layout!-Tuple{Function}","page":"Function reference","title":"Lynx.layout!","text":"layout!(layout::Function)\n\nSets the current layout.\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#Lynx.loop!-Tuple{Bool}","page":"Function reference","title":"Lynx.loop!","text":"loop!(x::Bool)\n\nWhether or not the update function should be called every frame.\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#Lynx.mapr-NTuple{5, Real}","page":"Function reference","title":"Lynx.mapr","text":"    mapr(t, a, b, c, d) -> Real\n\nMaps the value t from the interval [a, b] to [c, d]\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#Lynx.mapr-Tuple{Real, Real, Real}","page":"Function reference","title":"Lynx.mapr","text":"    mapr(t, a, b) -> Real\n\nMaps the value t from the interval [0, 1] to [a, b]\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#Lynx.onmousedown-Tuple{Function, Canvas}","page":"Function reference","title":"Lynx.onmousedown","text":"    onmousedown(callback, canvas)\n\nThe mouse-down event is fired when the user press with the mouse on the canvas.\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#Lynx.onmousedrag-Tuple{Function, Canvas}","page":"Function reference","title":"Lynx.onmousedrag","text":"    onmousedrag(callback, canvas)\n\nThe mouse-drag event is fired when the user holds down and move the cursor on the canvas.\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#Lynx.onmousemove-Tuple{Function, Canvas}","page":"Function reference","title":"Lynx.onmousemove","text":"    onmousemove(callback, canvas)\n\nThe mouse-move event is fired when the user moves the cursor on the canvas.\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#Lynx.onmouseup-Tuple{Function, Canvas}","page":"Function reference","title":"Lynx.onmouseup","text":"    onmouseup(callback, canvas)\n\nThe mouse-up event is fired when the user release the mouse on the canvas.\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#Lynx.onscroll-Tuple{Function, Canvas}","page":"Function reference","title":"Lynx.onscroll","text":"    onscroll(callback, canvas)\n\nThe scroll event is fired when the user scrolls with the mouse-wheel on the canvas.\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#Lynx.pulse!-Tuple{ProgressBar}","page":"Function reference","title":"Lynx.pulse!","text":"    pulse!(widget::ProgressBar) -> Nothing\n\nMake the progress bar pulse, indicating that a unknown amount of progress has been made.\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#Lynx.rspan-Tuple{Int64}","page":"Function reference","title":"Lynx.rspan","text":"    rspan(rows) -> GridElement\n\nCreates a empty GridElement that spans multiple rows\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#Lynx.run!","page":"Function reference","title":"Lynx.run!","text":"    run!(update::Function [, setup::Function]; await = false) -> Nothing\n\nRun the current LynxApp with the given update function.  If await is true, the main task will be blocked until  the user closes the window.\n\nYou can also specify a setup function that will be called when the window is created.\n\n\n\n\n\n","category":"function"},{"location":"reference/api/#Lynx.span-Tuple{Int64, Int64}","page":"Function reference","title":"Lynx.span","text":"    span(rows, cols) -> GridElement\n\nCreates a empty GridElement that spans multiple rows and cols.\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#Lynx.span-Tuple{}","page":"Function reference","title":"Lynx.span","text":"    span(; rows = 1, cols = 1) -> GridElement\n\nCreates a empty GridElement that spans multiple rows and cols.\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#Lynx.use!-Tuple{Widget}","page":"Function reference","title":"Lynx.use!","text":"    use!(widget) -> Widget\n\nAdds the widget to the current application and returns it.\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#Lynx.value!-Tuple{Input, Any}","page":"Function reference","title":"Lynx.value!","text":"    value!(widget::Input, value) -> Nothing\n\nSets the value of a Input widget.\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#Lynx.value-Tuple{Input}","page":"Function reference","title":"Lynx.value","text":"    value(widget::Input{T}) -> T\n\nReturns the value of a Input widget.\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#Lynx.AbstractLayout","page":"Function reference","title":"Lynx.AbstractLayout","text":"Layouts are used to organize the canvas and other widgets within the window.\n\nThey are simple function or callable structures.\n\nExample of layout implementation:\n\nstruct MyLayout <: AbstractLayout\n    fields...\n    function MyLayout(args...)\n        ...\n    end\nend\n\nfunction (layout::MyLayout)(window, canvas, widgets...)\n    ...\nend\n\nThe call implementation of a layout should return a widget  that contains (or not) the canvas and the widgets. The returned widget will then be added to the window.\n\n\n\n\n\n","category":"type"},{"location":"reference/api/#Lynx.Box","page":"Function reference","title":"Lynx.Box","text":"A container used to pack widgets together.\n\n\n\n\n\n","category":"type"},{"location":"reference/api/#Lynx.Box-Tuple{Symbol, Vararg{Widget, N} where N}","page":"Function reference","title":"Lynx.Box","text":"    Box(direction, children...; props...) -> Box\n\nCreates a Box widget.\n\nThe direction parameter determines the direction the widgets  are packed. :v for vertical or :h for horizontal.\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#Lynx.Button","page":"Function reference","title":"Lynx.Button","text":"A widget that emits a signal when clicked on\n\n\n\n\n\n","category":"type"},{"location":"reference/api/#Lynx.CheckBox","page":"Function reference","title":"Lynx.CheckBox","text":"Create widgets with a discrete toggle button\n\n\n\n\n\n","category":"type"},{"location":"reference/api/#Lynx.ColorButton","page":"Function reference","title":"Lynx.ColorButton","text":"A button to launch a color selection dialog\n\n\n\n\n\n","category":"type"},{"location":"reference/api/#Lynx.Dropdown-Tuple{Vararg{String, N} where N}","page":"Function reference","title":"Lynx.Dropdown","text":"A widget used to choose from a list of items\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#Lynx.Frame","page":"Function reference","title":"Lynx.Frame","text":"A bin with a decorative frame and optional label\n\n\n\n\n\n","category":"type"},{"location":"reference/api/#Lynx.GLArea","page":"Function reference","title":"Lynx.GLArea","text":"Custom drawing with OpenGL.\n\n\n\n\n\n","category":"type"},{"location":"reference/api/#Lynx.Grid","page":"Function reference","title":"Lynx.Grid","text":"A container for displaying widgets in a grid.\n\n\n\n\n\n","category":"type"},{"location":"reference/api/#Lynx.Grid-Tuple{String, NamedTuple}","page":"Function reference","title":"Lynx.Grid","text":"    Grid(layout::String, elements::NamedTuple; props...) -> Grid\n\nCreate a Grid based on a layout.\n\nThe layout argument is a String representation of the Grid. Each cell can be empty . or can have a name. Then, the layout will be transformed in an Array and every named cell will be  replaced by the widget in elements based on its name.\n\nLayout example:\n\nlayout = \"\"\"\n    header  .       . .       \n    sidebar section . items_a\n    .       .       . .\n    .       .       . items_b\n    footer  .       . .\n\"\"\"\n\nThe . (dot) character represents a empty cell that create space for element that span multiple cells.\n\nEach row is separated by the \\n (new-line) character and each cell by space. You can name each cell, as long as the name don't have spaces.\n\nNow we can use this layout and pass our widgets:\n\nGrid(layout, (\n    header  = Button(\"Header\")  |> cspan(4),\n    sidebar = Button(\"Sidebar\") |> rspan(3),\n    section = Button(\"Section\") |> span(2, 3),\n    items_a = Button(\"Items A\") |> rspan(2),\n    items_b = Button(\"Items B\"),\n    footer  = Button(\"Footer\") |> cspan(4)\n)),\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#Lynx.Grid-Tuple{Vector{T} where T}","page":"Function reference","title":"Lynx.Grid","text":"    Grid(rows::Vector; props...) -> Grid\n\nCreates a Grid and adds to it each element in rows.\n\nThe rows argument must be a list of Vector{<:Widget}. The position of each element in rows determines its position within the grid.\n\nYou can also use GridElement to make widgets span multiple cells within the grid.\n\nExample:\n\ngrid = Grid(\n    [Label(\"A\"), Label(\"B\")],\n    [Label(\"C\"), Label(\"D\")],\n    # span 2 columns\n    [Label(\"E\") |> span(cols=2)]\n)\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#Lynx.GridElement","page":"Function reference","title":"Lynx.GridElement","text":"Represents a grid element that may span multiple rows and/or columns.\n\nYou can use the span function to create a empty GridElement.\n\nCalling a empty GridElement as a function and passing a Widget as argument will transform that widget into a GridElement, making it span multiple cells in a Grid container.\n\nUsage:\n\ngrid = Grid([\n    # The Button will span 3 columns\n    [Button(\"Example 1\") |> span(cols=3)],\n    # The Button will span 2 rows\n    [Button(\"Example 2\") |> span(rows=2)],\n    # The Button will span an 2 rows and 3 columns\n    [Button(\"Example 3\") |> span(2, 3)],\n])\n\n\n\n\n\n","category":"type"},{"location":"reference/api/#Lynx.ImageView","page":"Function reference","title":"Lynx.ImageView","text":"A widget for displaying an image.\n\n\n\n\n\n","category":"type"},{"location":"reference/api/#Lynx.Label","page":"Function reference","title":"Lynx.Label","text":"A widget that displays a small to medium amount of text\n\n\n\n\n\n","category":"type"},{"location":"reference/api/#Lynx.LynxApp","page":"Function reference","title":"Lynx.LynxApp","text":"An LynxApp is a basic structure that holds a window, a canvas and other widgets to make a interactive application with a few lines of code.\n\n\n\n\n\n","category":"type"},{"location":"reference/api/#Lynx.Paned","page":"Function reference","title":"Lynx.Paned","text":"A widget with two adjustable panes.\n\n\n\n\n\n","category":"type"},{"location":"reference/api/#Lynx.Paned-Tuple{Symbol, Vararg{Widget, N} where N}","page":"Function reference","title":"Lynx.Paned","text":"    Paned(direction, children...; props...) -> Paned\n\nCreates a Paned widget.\n\nThe direction parameter determines how the two panes are arranged, either horizontally :h, or vertically :v.\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#Lynx.ProgressBar","page":"Function reference","title":"Lynx.ProgressBar","text":"A widget which indicates progress visually\n\nUse the fill! and the pulse! functions to control the progress bar.\n\n\n\n\n\n","category":"type"},{"location":"reference/api/#Lynx.Scrolled","page":"Function reference","title":"Lynx.Scrolled","text":"Adds scrollbars to its child widget.\n\n\n\n\n\n","category":"type"},{"location":"reference/api/#Lynx.Scrolled-Tuple{Vararg{Widget, N} where N}","page":"Function reference","title":"Lynx.Scrolled","text":"    Scrolled(children::Widget...; props...) -> Scrolled\n\nCreates a Scrolled widget.\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#Lynx.SideBar","page":"Function reference","title":"Lynx.SideBar","text":"The SideBar layout divides the window between the canvas and a sidebar containing the other widgets.\n\n\n\n\n\n","category":"type"},{"location":"reference/api/#Lynx.SideBar-2","page":"Function reference","title":"Lynx.SideBar","text":"    SideBar(position = :left, size = .25, props = NamedTuple()) -> SideBar\n\nCreates a SideBar layout. The position determines where the sidebar is placed relative  to the canvas (can be either :left or :right). The size controls the width of the  sidebar relative to the width of the window (must be a value between 0 and 1). You can  also pass aditional properties for the sidebar widget using the props parameter.\n\n\n\n\n\n","category":"type"},{"location":"reference/api/#Lynx.Slider","page":"Function reference","title":"Lynx.Slider","text":"A slider widget for selecting a value from a range\n\n\n\n\n\n","category":"type"},{"location":"reference/api/#Lynx.SpinButton","page":"Function reference","title":"Lynx.SpinButton","text":"Retrieve an integer or floating-point number from the user\n\n\n\n\n\n","category":"type"},{"location":"reference/api/#Lynx.Switch","page":"Function reference","title":"Lynx.Switch","text":"A “light switch” style toggle\n\n\n\n\n\n","category":"type"},{"location":"reference/api/#Lynx.TextField","page":"Function reference","title":"Lynx.TextField","text":"A single line text entry field.\n\n\n\n\n\n","category":"type"},{"location":"reference/api/#Lynx.ToggleButton","page":"Function reference","title":"Lynx.ToggleButton","text":"Create buttons which retain their state\n\n\n\n\n\n","category":"type"},{"location":"reference/functionindex/#Index","page":"Alphabetical function list","title":"Index","text":"","category":"section"},{"location":"reference/functionindex/","page":"Alphabetical function list","title":"Alphabetical function list","text":"","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"DocTestSetup = quote\n    using Lynx, Colors\nend","category":"page"},{"location":"#Introduction-to-Lynx","page":"Introduction","title":"Introduction to Lynx","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"Lynx is a julia package for creating interactive applications using the drawing tools provided by the Luxor.jl package and the  widgets from the Gtk.jl package. ","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"Lynx is suitable for creating quick aplications for real time data visualization and simulations, but it can also be used for building GUI apps.","category":"page"},{"location":"#Installation","page":"Introduction","title":"Installation","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"Install the package using the package manager:","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"] add Lynx","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"Then load the package with:","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"using Lynx","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"To test with an example, type:","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"julia> include(joinpath(pathof(Lynx), \"../../examples/basic.jl\"))","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"Which should open an window with a black background and a green  circle moving randomly.","category":"page"},{"location":"#Basic-usage","page":"Introduction","title":"Basic usage","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"There are two ways for using Lynx.","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"The first uses a LynxApp that manages the window, the canvas and other widgets.","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"using Lynx\nusing Luxor\n\nLynx.init(\"Hello, world!\", 800, 600)\n\nt = 0\n\n# drawing is done here\nfunction update(dt)\n    background(\"#111\")\n    origin()\n    sethue(\"yellowgreen\")\n    circle(O, 50(cos(t) + 1), :fill)\n    global t += dt\nend\n\n# await=true will make sure the program only\n# stops when the window is closed\nrun!(update, await=true)","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"The second way, you create the Widgets yourself:","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"using Lynx\nusing Luxor\n\nwindow = Window(\"Hello, world!\", 400, 400)\ncanvas = Canvas()\n\npush!(window, canvas)\n\nt = 0\n\nonupdate(canvas) do dt\n    background(\"#111\")\n    origin()\n    sethue(\"yellowgreen\")\n    circle(O, 50(cos(t) + 1), :fill)\n    global t += dt\nend\n\nLynx.showall(window)\n@waitfor window.destroy","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"Both examples above are equivalent.","category":"page"},{"location":"#Documentation","page":"Introduction","title":"Documentation","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"This documentation was built using Documenter.jl.","category":"page"},{"location":"tutorials/quickstart/#Quick-start","page":"Quick Start","title":"Quick start","text":"","category":"section"},{"location":"tutorials/quickstart/","page":"Quick Start","title":"Quick Start","text":"In this section you will learn how to use Lynx to build your apps.","category":"page"},{"location":"tutorials/quickstart/","page":"Quick Start","title":"Quick Start","text":"Make sure to have the Lynx.jl package installed, as usual with:","category":"page"},{"location":"tutorials/quickstart/","page":"Quick Start","title":"Quick Start","text":"julia> ] add Lynx","category":"page"},{"location":"tutorials/quickstart/#Basic-example","page":"Quick Start","title":"Basic example","text":"","category":"section"},{"location":"tutorials/quickstart/","page":"Quick Start","title":"Quick Start","text":"First, don't forget to load the package:","category":"page"},{"location":"tutorials/quickstart/","page":"Quick Start","title":"Quick Start","text":"using Lynx","category":"page"},{"location":"tutorials/quickstart/","page":"Quick Start","title":"Quick Start","text":"Since we are gonna use the Luxor.jl package a lot for drawing operations, it makes sense to install as a direct dependency as well.","category":"page"},{"location":"tutorials/quickstart/","page":"Quick Start","title":"Quick Start","text":"julia> ] add Luxor","category":"page"},{"location":"tutorials/quickstart/","page":"Quick Start","title":"Quick Start","text":"Then, load with:","category":"page"},{"location":"tutorials/quickstart/","page":"Quick Start","title":"Quick Start","text":"using Luxor","category":"page"},{"location":"tutorials/quickstart/","page":"Quick Start","title":"Quick Start","text":"There are two different ways to use Lynx to create visualizations: using a LynxApp or using Widgets to build the UI. We are gonna use the LynxApp to build this first example.","category":"page"},{"location":"tutorials/quickstart/","page":"Quick Start","title":"Quick Start","text":"The LynxApp contains everything we need to build a simple visualization app: a Canvas, a Window and a Layout mechanism to determine how the widgets are displayed.","category":"page"},{"location":"tutorials/quickstart/","page":"Quick Start","title":"Quick Start","text":"First, we create our LynxApp using the init function:","category":"page"},{"location":"tutorials/quickstart/","page":"Quick Start","title":"Quick Start","text":"Lynx.init(\"Basic Example\", 800, 600)","category":"page"},{"location":"tutorials/quickstart/","page":"Quick Start","title":"Quick Start","text":"The init function expects the title, width and height of the window as parameters.","category":"page"},{"location":"tutorials/quickstart/","page":"Quick Start","title":"Quick Start","text":"Then, we define our setup and update functions:","category":"page"},{"location":"tutorials/quickstart/","page":"Quick Start","title":"Quick Start","text":"function setup()\n    @info \"Canvas width is $(@width) and height is $(@height)\"\nend","category":"page"},{"location":"tutorials/quickstart/","page":"Quick Start","title":"Quick Start","text":"The setup function is optional. It is useful for initialization. For example, when you need to know the width and height of the Canvas.","category":"page"},{"location":"tutorials/quickstart/","page":"Quick Start","title":"Quick Start","text":"Then, we create our update function.","category":"page"},{"location":"tutorials/quickstart/","page":"Quick Start","title":"Quick Start","text":"time = 0.0 # the amount of time that has passed\n\nfunction update(dt)\n    background(\"#111\")\n    sethue(\"yellowgreen\")\n    origin()\n\n    radius = 50 * (cos(time) + 2)\n    circle(O, radius, :fill)\n\n    # update the time\n    global time += dt\nend","category":"page"},{"location":"tutorials/quickstart/","page":"Quick Start","title":"Quick Start","text":"We also define a time variable to keep track on how much time has passed since the first frame.","category":"page"},{"location":"tutorials/quickstart/","page":"Quick Start","title":"Quick Start","text":"The update function expects a single argument dt, which is the amount of time between the last and the current frame.","category":"page"},{"location":"tutorials/quickstart/","page":"Quick Start","title":"Quick Start","text":"Then, we run our application using the run! function, passing the update and setup functions:","category":"page"},{"location":"tutorials/quickstart/","page":"Quick Start","title":"Quick Start","text":"run!(update, setup)","category":"page"},{"location":"tutorials/quickstart/","page":"Quick Start","title":"Quick Start","text":"Here is all the code for this example:","category":"page"},{"location":"tutorials/quickstart/","page":"Quick Start","title":"Quick Start","text":"using Lynx\nusing Luxor\n\nLynx.init(\"Basic Example\", 800, 600)\n\nfunction setup()\n    @info \"Canvas width is $(@width) and height is $(@height)\"\nend\n\ntime = 0.0 # the amount of time that has passed\n\nfunction update(dt)\n    background(\"#111\")\n    sethue(\"yellowgreen\")\n    origin()\n\n    radius = 50 * (cos(time) + 2)\n    circle(O, radius, :fill)\n\n    # update the time\n    global time += dt\nend\n\nrun!(update, setup)","category":"page"},{"location":"tutorials/quickstart/","page":"Quick Start","title":"Quick Start","text":"If you run the code above in the julia REPL, the output will look like this:","category":"page"},{"location":"tutorials/quickstart/","page":"Quick Start","title":"Quick Start","text":"(Image: Basic Example)","category":"page"}]
}
